void solve(Node* root,vector<vector<int>>& v,vector<int> path)
{
    if(!root) return;
    path.push_back(root->data);
    if(!root->left && !root->right) 
    v.push_back(path);
    solve(root->left,v,path);
    solve(root->right,v,path);
}
vector<vector<int>> Paths(Node* root)
{
    // Code here
    vector<vector<int>> v;
    vector<int> path;
    solve(root,v,path);
    return v;
}


// reduced space complexitys
void solve(Node* root,vector<vector<int>>& v,vector<int>& path)
{
    if(!root) return;
    path.push_back(root->data);
    if(!root->left && !root->right) 
    v.push_back(path);
    solve(root->left,v,path);
    solve(root->right,v,path);
    path.pop_back();
}
vector<vector<int>> Paths(Node* root)
{
    // Code here
    vector<vector<int>> v;
    vector<int> path;
    solve(root,v,path);
    return v;
}